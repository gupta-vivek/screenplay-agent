from langchain_core.messages import SystemMessage
from langchain_deepseek import ChatDeepSeek
from langgraph.graph import MessagesState
from langgraph.graph import START, StateGraph
from langgraph.graph.state import CompiledStateGraph
from langgraph.prebuilt import ToolNode
from langgraph.prebuilt import tools_condition

from src.tools import check_movie_exists, retrieve_documents


class ScreenplayAgent:
    def __init__(self):
        self.tools = [check_movie_exists, retrieve_documents]
        self.llm = ChatDeepSeek(model="deepseek-chat")
        self.graph = None

    def build_graph(self) -> CompiledStateGraph:
        """
        Builds a state graph for an agent to process questions about movie scripts.
        :return: A compiled state graph object
        """

        sys_msg = SystemMessage(
            content="You are an agent that can answer questions about movie scripts present in the database."
                    "1. When user asks a query, identify the original movie title from the query."
                    "2. Pass the original movie title to the check_movie_exists function."
                    "3. If the output of check_movie_exists function matches with the original movie title, use it to retrieve documents.")

        llm_with_tools = self.llm.bind_tools(self.tools, parallel_tool_calls=False)

        def assistant(state: MessagesState):
            return {"messages": [llm_with_tools.invoke([sys_msg] + state["messages"])]}

        builder = StateGraph(MessagesState)

        # Nodes
        builder.add_node("assistant", assistant)
        builder.add_node("tools", ToolNode(self.tools))

        # Edges
        builder.add_edge(START, "assistant")
        builder.add_conditional_edges("assistant", tools_condition)
        builder.add_edge("tools", "assistant")

        # react_graph_memory = builder.compile(checkpointer=memory)
        self.graph = builder.compile()
        return self.graph

    def invoke(self, message: str) -> str:
        """
        Processes a given query through an agent graph and returns the final response.

        :param str message: User message
        :return: The content of the last message in the output generated by the graph.
        """
        output = self.graph.invoke({"messages": message})
        return output['messages'][-1].content

agent = ScreenplayAgent()
graph = agent.build_graph()